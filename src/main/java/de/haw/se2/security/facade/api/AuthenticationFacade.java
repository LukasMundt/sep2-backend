/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.14.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package de.haw.se2.security.facade.api;

import de.haw.se2.speedrun.openapitools.api.ApiUtil;
import de.haw.se2.speedrun.openapitools.model.Credentials;
import de.haw.se2.speedrun.openapitools.model.TokenResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;

import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-05-12T11:35:57.825139837Z[Etc/UTC]", comments = "Generator version: 7.14.0-SNAPSHOT")
@Validated
@Tag(name = "authentication", description = "All about the authentication")
public interface AuthenticationFacade {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /rest/auth : user logout
     * Logs the current user out, destroying the existing token, if any.
     *
     * @return Returned if the user was successfully logged out. (status code 204)
     *         or Returned if the caller is not authenticated. (status code 401)
     */
    @Operation(
        operationId = "restAuthDelete",
        summary = "user logout",
        description = "Logs the current user out, destroying the existing token, if any.",
        tags = { "authentication" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the user was successfully logged out."),
            @ApiResponse(responseCode = "401", description = "Returned if the caller is not authenticated.")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/auth"
    )
    
    default ResponseEntity<Void> restAuthDelete(
        
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/auth : user login info
     * Returns information about the currently authenticated user&#39;s token.
     *
     * @return Returned if the caller is authenticated. (status code 200)
     *         or Returned if the caller is not authenticated. (status code 401)
     */
    @Operation(
        operationId = "restAuthGet",
        summary = "user login info",
        description = "Returns information about the currently authenticated user's token.",
        tags = { "authentication" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the caller is authenticated."),
            @ApiResponse(responseCode = "401", description = "Returned if the caller is not authenticated.")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/auth"
    )
    
    default ResponseEntity<Void> restAuthGet(
        
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/auth : user login
     * Creates a new token for a user.
     *
     * @param credentials  (required)
     * @return Returns information about the caller&#39;s token if the caller is authenticated. (status code 200)
     *         or Returned if the login fails due to invalid credentials. (status code 401)
     */
    @Operation(
        operationId = "restAuthPost",
        summary = "user login",
        description = "Creates a new token for a user.",
        tags = { "authentication" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns information about the caller's token if the caller is authenticated.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TokenResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the login fails due to invalid credentials.")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/auth",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<TokenResponse> restAuthPost(
        @Parameter(name = "Credentials", description = "", required = true) @Valid @RequestBody Credentials credentials
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"access_token\" : \"access_token\", \"token_type\" : \"Bearer\", \"expires_in\" : 3600 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
