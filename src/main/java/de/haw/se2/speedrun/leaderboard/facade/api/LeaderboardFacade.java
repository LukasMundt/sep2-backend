/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.14.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package de.haw.se2.speedrun.leaderboard.facade.api;

import de.haw.se2.speedrun.openapitools.api.ApiUtil;
import de.haw.se2.speedrun.openapitools.model.Leaderboard;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;


import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;

import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-05-06T09:14:52.282358031Z[Etc/UTC]", comments = "Generator version: 7.14.0-SNAPSHOT")
@Validated
@Tag(name = "leaderboard", description = "All about the leaderboards")
public interface LeaderboardFacade {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /leaderboard/{game}/{category} : Get leaderboard by game and category.
     * Get leaderboard by game and category.
     *
     * @param game the game of the leaderboard (required)
     * @param category the category of the leaderboard (required)
     * @return successful operation (status code 200)
     *         or Game or category not Found (status code 404)
     */
    @Operation(
        operationId = "leaderboardGameCategoryGet",
        summary = "Get leaderboard by game and category.",
        description = "Get leaderboard by game and category.",
        tags = { "leaderboard" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Leaderboard.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = Leaderboard.class))
            }),
            @ApiResponse(responseCode = "404", description = "Game or category not Found", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class)),
                @Content(mediaType = "application/xml", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/leaderboard/{game}/{category}",
        produces = { "application/json", "application/xml" }
    )
    
    default ResponseEntity<Leaderboard> leaderboardGameCategoryGet(
        @Parameter(name = "game", description = "the game of the leaderboard", required = true, in = ParameterIn.PATH) @PathVariable("game") String game,
        @Parameter(name = "category", description = "the category of the leaderboard", required = true, in = ParameterIn.PATH) @PathVariable("category") String category
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"id\" : 2, \"category\" : \"ANY%\", \"runs\" : [ { \"date\" : \"2000-01-23T04:56:07.000+00:00\", \"speedrunner\" : \"speedrunner\", \"runtime\" : { \"milliseconds\" : 5, \"hours\" : 0, \"seconds\" : 1, \"minutes\" : 6 }, \"id\" : 5 }, { \"date\" : \"2000-01-23T04:56:07.000+00:00\", \"speedrunner\" : \"speedrunner\", \"runtime\" : { \"milliseconds\" : 5, \"hours\" : 0, \"seconds\" : 1, \"minutes\" : 6 }, \"id\" : 5 } ] }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<null> <id>123456789</id> </null>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"code\" : \"code\", \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<null> <code>aeiou</code> <message>aeiou</message> </null>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
