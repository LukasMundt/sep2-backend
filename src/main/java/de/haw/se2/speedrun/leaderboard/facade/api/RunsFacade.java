/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.14.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package de.haw.se2.speedrun.leaderboard.facade.api;

import de.haw.se2.speedrun.openapitools.api.ApiUtil;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import de.haw.se2.speedrun.openapitools.model.RunDto;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;

import java.util.List;
import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-05-16T13:03:18.760533262Z[Etc/UTC]", comments = "Generator version: 7.14.0-SNAPSHOT")
@Validated
@Tag(name = "runs", description = "All about the runs.")
public interface RunsFacade {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /rest/api/games/{gameSlug}/{categoryId}/leaderboard : Get leaderboard by game slug and category.
     * Get leaderboard by game slug and category. The leaderboard is already sorted by runtime.
     *
     * @param gameSlug the game of the leaderboard (required)
     * @param categoryId the category of the leaderboard (required)
     * @return Returns a sorted list of runs that are representing the leaderboard. (status code 200)
     *         or Returned if the game slug or category were not found. (status code 404)
     */
    @Operation(
        operationId = "restApiGamesGameSlugCategoryIdLeaderboardGet",
        summary = "Get leaderboard by game slug and category.",
        description = "Get leaderboard by game slug and category. The leaderboard is already sorted by runtime.",
        tags = { "runs" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns a sorted list of runs that are representing the leaderboard.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = RunDto.class)))
            }),
            @ApiResponse(responseCode = "404", description = "Returned if the game slug or category were not found.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/games/{gameSlug}/{categoryId}/leaderboard",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<RunDto>> restApiGamesGameSlugCategoryIdLeaderboardGet(
        @Parameter(name = "gameSlug", description = "the game of the leaderboard", required = true, in = ParameterIn.PATH) @PathVariable("gameSlug") String gameSlug,
        @Parameter(name = "categoryId", description = "the category of the leaderboard", required = true, in = ParameterIn.PATH) @PathVariable("categoryId") String categoryId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"date\" : \"2000-01-23T04:56:07.000+00:00\", \"speedrunner\" : \"speedrunner\", \"runtime\" : { \"milliseconds\" : 5, \"hours\" : 0, \"seconds\" : 1, \"minutes\" : 6 } }, { \"date\" : \"2000-01-23T04:56:07.000+00:00\", \"speedrunner\" : \"speedrunner\", \"runtime\" : { \"milliseconds\" : 5, \"hours\" : 0, \"seconds\" : 1, \"minutes\" : 6 } } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/games/{gameSlug}/{categoryId}/submit : Submit a new run by game and category.
     * Submit a new run by game and category.
     *
     * @param gameSlug the game of the leaderboard (required)
     * @param categoryId the category of the leaderboard (required)
     * @param runDto  (required)
     * @return Returned if the run is submitted. (status code 200)
     *         or Returned if the caller is not authenticated. (status code 401)
     *         or Returned if the game slug or category were not found. (status code 404)
     *         or Returned if the runtime doesn’t fulfill the requirements. (status code 422)
     */
    @Operation(
        operationId = "restApiGamesGameSlugCategoryIdSubmitPost",
        summary = "Submit a new run by game and category.",
        description = "Submit a new run by game and category.",
        tags = { "runs" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the run is submitted."),
            @ApiResponse(responseCode = "401", description = "Returned if the caller is not authenticated."),
            @ApiResponse(responseCode = "404", description = "Returned if the game slug or category were not found."),
            @ApiResponse(responseCode = "422", description = "Returned if the runtime doesn’t fulfill the requirements.")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/games/{gameSlug}/{categoryId}/submit",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> restApiGamesGameSlugCategoryIdSubmitPost(
        @Parameter(name = "gameSlug", description = "the game of the leaderboard", required = true, in = ParameterIn.PATH) @PathVariable("gameSlug") String gameSlug,
        @Parameter(name = "categoryId", description = "the category of the leaderboard", required = true, in = ParameterIn.PATH) @PathVariable("categoryId") String categoryId,
        @Parameter(name = "RunDto", description = "", required = true) @Valid @RequestBody RunDto runDto
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
