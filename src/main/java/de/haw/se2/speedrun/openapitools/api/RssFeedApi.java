/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.14.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package de.haw.se2.speedrun.openapitools.api;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;

import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-06-05T18:48:11.037630545Z[Etc/UTC]", comments = "Generator version: 7.14.0-SNAPSHOT")
@Validated
@Tag(name = "RSSFeed", description = "All about the RSS Feed")
public interface RssFeedApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /rest/rss/getFeed/{id} : Get the RSS Feed.
     * Get the RSS Feed to the given id.
     *
     * @param id  (required)
     * @return Returns the RSS Feed to the given id. (status code 200)
     *         or Returned if the id is not found. (status code 404)
     */
    @Operation(
        operationId = "restRssGetFeedIdGet",
        summary = "Get the RSS Feed.",
        description = "Get the RSS Feed to the given id.",
        tags = { "RSSFeed" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns the RSS Feed to the given id.", content = {
                @Content(mediaType = "application/xml", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "404", description = "Returned if the id is not found.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/rss/getFeed/{id}",
        produces = { "application/xml" }
    )
    
    default ResponseEntity<String> restRssGetFeedIdGet(
        @Parameter(name = "id", description = "", required = true, in = ParameterIn.PATH) @PathVariable("id") String id
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/rss/getFeedUrl : Get the RSS Feed URL.
     * Get the RSS Feed URL.
     *
     * @return Returns the RSS Feed URL if the caller is authenticated. (status code 200)
     *         or Returned if the caller is not authenticated. (status code 401)
     */
    @Operation(
        operationId = "restRssGetFeedUrlGet",
        summary = "Get the RSS Feed URL.",
        description = "Get the RSS Feed URL.",
        tags = { "RSSFeed" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns the RSS Feed URL if the caller is authenticated.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the caller is not authenticated.")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/rss/getFeedUrl",
        produces = { "application/json" }
    )
    
    default ResponseEntity<String> restRssGetFeedUrlGet(
        
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
