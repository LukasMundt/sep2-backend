/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.14.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package de.haw.se2.speedrun.openapitools.api;

import de.haw.se2.speedrun.openapitools.model.Category;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ExampleObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-05-27T20:21:07.566967269Z[Etc/UTC]", comments = "Generator version: 7.14.0-SNAPSHOT")
@Validated
@Tag(name = "categories", description = "All about the categories.")
public interface CategoriesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /rest/api/games/{gameSlug}/categories : Get available categories by game slug.
     * Get available categories by game slug.
     *
     * @param gameSlug  (required)
     * @return Returns all available categories for the given game slug. (status code 200)
     *         or Returned if the game slug were not found. (status code 404)
     */
    @Operation(
        operationId = "restApiGamesGameSlugCategoriesGet",
        summary = "Get available categories by game slug.",
        description = "Get available categories by game slug.",
        tags = { "categories" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns all available categories for the given game slug.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Category.class)))
            }),
            @ApiResponse(responseCode = "404", description = "Returned if the game slug were not found.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/games/{gameSlug}/categories",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Category>> restApiGamesGameSlugCategoriesGet(
        @Parameter(name = "gameSlug", description = "", required = true, in = ParameterIn.PATH) @PathVariable("gameSlug") String gameSlug
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"label\" : \"Any %\", \"categoryId\" : \"ANY_PERCENT\" }, { \"label\" : \"Any %\", \"categoryId\" : \"ANY_PERCENT\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/games/{gameSlug}/categories : Adds a new category for a game.
     * Adds a new category for a game. The id has to be unique. Only users with admin rights are allowed to add a new category.
     *
     * @param gameSlug  (required)
     * @param category  (required)
     * @return Returned if the category was successfully added. (status code 200)
     *         or Returned if the caller is not authenticated. (status code 401)
     *         or Returned if the id is not unique. (status code 409)
     */
    @Operation(
        operationId = "restApiGamesGameSlugCategoriesPost",
        summary = "Adds a new category for a game.",
        description = "Adds a new category for a game. The id has to be unique. Only users with admin rights are allowed to add a new category.",
        tags = { "categories" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the category was successfully added."),
            @ApiResponse(responseCode = "401", description = "Returned if the caller is not authenticated."),
            @ApiResponse(responseCode = "409", description = "Returned if the id is not unique.")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/games/{gameSlug}/categories",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> restApiGamesGameSlugCategoriesPost(
        @Parameter(name = "gameSlug", description = "", required = true, in = ParameterIn.PATH) @PathVariable("gameSlug") String gameSlug,
        @Parameter(name = "Category", description = "", required = true) @Valid @RequestBody Category category
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/games/{gameSlug}/{categoryId} : Deletes an existing category for a game.
     * Deletes an existing category for a game. The id has to exist. Only users with admin rights are allowed to delete a category.
     *
     * @param gameSlug  (required)
     * @param categoryId the category of the leaderboard (required)
     * @return Returned if the category was successfully deleted. (status code 204)
     *         or Returned if the caller is not authenticated. (status code 401)
     *         or Returned if the id is not found. (status code 404)
     */
    @Operation(
        operationId = "restApiGamesGameSlugCategoryIdDelete",
        summary = "Deletes an existing category for a game.",
        description = "Deletes an existing category for a game. The id has to exist. Only users with admin rights are allowed to delete a category.",
        tags = { "categories" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the category was successfully deleted."),
            @ApiResponse(responseCode = "401", description = "Returned if the caller is not authenticated."),
            @ApiResponse(responseCode = "404", description = "Returned if the id is not found.")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/games/{gameSlug}/{categoryId}"
    )
    
    default ResponseEntity<Void> restApiGamesGameSlugCategoryIdDelete(
        @Parameter(name = "gameSlug", description = "", required = true, in = ParameterIn.PATH) @PathVariable("gameSlug") String gameSlug,
        @Parameter(name = "categoryId", description = "the category of the leaderboard", required = true, in = ParameterIn.PATH) @PathVariable("categoryId") String categoryId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
