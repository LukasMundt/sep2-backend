/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.14.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package de.haw.se2.speedrun.openapitools.api;

import de.haw.se2.speedrun.openapitools.model.LoginCredentials;
import de.haw.se2.speedrun.openapitools.model.RegisterCredentials;
import de.haw.se2.speedrun.openapitools.model.RegisterError;
import de.haw.se2.speedrun.openapitools.model.TokenResponse;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;

import java.util.List;
import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-06-05T18:48:11.037630545Z[Etc/UTC]", comments = "Generator version: 7.14.0-SNAPSHOT")
@Validated
@Tag(name = "authentication", description = "All about the authentication.")
public interface AuthenticationApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /rest/auth : user login info
     * Returns information about the currently authenticated user&#39;s token.
     *
     * @return Returns the authorities if the caller is authenticated. (status code 200)
     *         or Returned if the caller is not authenticated. (status code 401)
     */
    @Operation(
        operationId = "restAuthGet",
        summary = "user login info",
        description = "Returns information about the currently authenticated user's token.",
        tags = { "authentication" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns the authorities if the caller is authenticated.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = String.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the caller is not authenticated.")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/auth",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<String>> restAuthGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ \"[\"Admin\",\"User\"]\", \"[\"Admin\",\"User\"]\" ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/auth/login : user login
     * Creates a new token for a user.
     *
     * @param loginCredentials  (required)
     * @return Returns information about the caller&#39;s token if the caller is authenticated. (status code 200)
     *         or Returned if the login fails due to invalid credentials. (status code 401)
     */
    @Operation(
        operationId = "restAuthLoginPost",
        summary = "user login",
        description = "Creates a new token for a user.",
        tags = { "authentication" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns information about the caller's token if the caller is authenticated.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TokenResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the login fails due to invalid credentials.")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/auth/login",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<TokenResponse> restAuthLoginPost(
        @Parameter(name = "LoginCredentials", description = "", required = true) @Valid @RequestBody LoginCredentials loginCredentials
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"expiresIn\" : 3600, \"accessToken\" : \"accessToken\", \"tokenType\" : \"Bearer\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/auth/register : user registration
     * Registers a new user in the system.
     *
     * @param registerCredentials  (required)
     * @return Returned if the user was successfully registered. (status code 200)
     *         or Returned if the user is already registered. (status code 409)
     *         or Returned if the password, email or username doesn’t fulfill the requirements. (status code 422)
     */
    @Operation(
        operationId = "restAuthRegisterPost",
        summary = "user registration",
        description = "Registers a new user in the system.",
        tags = { "authentication" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the user was successfully registered."),
            @ApiResponse(responseCode = "409", description = "Returned if the user is already registered.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RegisterError.class))
            }),
            @ApiResponse(responseCode = "422", description = "Returned if the password, email or username doesn’t fulfill the requirements.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = RegisterError.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/auth/register",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> restAuthRegisterPost(
        @Parameter(name = "RegisterCredentials", description = "", required = true) @Valid @RequestBody RegisterCredentials registerCredentials
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"emailError\" : \"emailError\", \"passwordError\" : \"passwordError\", \"usernameError\" : \"usernameError\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"emailError\" : \"emailError\", \"passwordError\" : \"passwordError\", \"usernameError\" : \"usernameError\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
