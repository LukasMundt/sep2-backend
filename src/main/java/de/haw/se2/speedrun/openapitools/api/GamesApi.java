/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.14.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package de.haw.se2.speedrun.openapitools.api;

import de.haw.se2.speedrun.openapitools.model.GameDto;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;

import java.util.List;
import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-06-05T18:48:11.037630545Z[Etc/UTC]", comments = "Generator version: 7.14.0-SNAPSHOT")
@Validated
@Tag(name = "games", description = "All about the games.")
public interface GamesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /rest/api/games/all : Get all available games.
     * Get all available games.
     *
     * @return Returns all available games. (status code 200)
     */
    @Operation(
        operationId = "restApiGamesAllGet",
        summary = "Get all available games.",
        description = "Get all available games.",
        tags = { "games" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns all available games.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = GameDto.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/games/all",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<GameDto>> restApiGamesAllGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"imageUrl\" : \"imageUrl\", \"name\" : \"minecraft\", \"slug\" : \"slug\" }, { \"imageUrl\" : \"imageUrl\", \"name\" : \"minecraft\", \"slug\" : \"slug\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/games/{gameSlug} : Get game by game slug.
     * Get game by game slug.
     *
     * @param gameSlug  (required)
     * @return Returns the GameDto for the given game slug. (status code 200)
     *         or Returned if the game slug were not found. (status code 404)
     */
    @Operation(
        operationId = "restApiGamesGameSlugGet",
        summary = "Get game by game slug.",
        description = "Get game by game slug.",
        tags = { "games" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns the GameDto for the given game slug.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = GameDto.class))
            }),
            @ApiResponse(responseCode = "404", description = "Returned if the game slug were not found.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/games/{gameSlug}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<GameDto> restApiGamesGameSlugGet(
        @Parameter(name = "gameSlug", description = "", required = true, in = ParameterIn.PATH) @PathVariable("gameSlug") String gameSlug
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"imageUrl\" : \"imageUrl\", \"name\" : \"minecraft\", \"slug\" : \"slug\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
