/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.14.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package de.haw.se2.speedrun.openapitools.api;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.annotation.Generated;
import de.haw.se2.speedrun.openapitools.model.RunReview;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;

import java.util.List;
import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-06-05T18:48:11.037630545Z[Etc/UTC]", comments = "Generator version: 7.14.0-SNAPSHOT")
@Validated
@Tag(name = "reviewing", description = "All about the admin review process.")
public interface ReviewingApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /rest/api/reviews/unreviewed/{gameSlug}/{categoryId} : Get a list of unreviewed runs by game and category.
     * Get a list of unreviewed runs. Only users with admin rights are allowed to get all unreviewed runs.
     *
     * @param gameSlug  (required)
     * @param categoryId the category of the leaderboard (required)
     * @return Returns a list of all unreviewed runs (status code 200)
     *         or Returned if the caller is not authenticated. (status code 401)
     */
    @Operation(
        operationId = "restApiReviewsUnreviewedGameSlugCategoryIdGet",
        summary = "Get a list of unreviewed runs by game and category.",
        description = "Get a list of unreviewed runs. Only users with admin rights are allowed to get all unreviewed runs.",
        tags = { "reviewing" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns a list of all unreviewed runs", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = RunReview.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the caller is not authenticated.")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/reviews/unreviewed/{gameSlug}/{categoryId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<RunReview>> restApiReviewsUnreviewedGameSlugCategoryIdGet(
        @Parameter(name = "gameSlug", description = "", required = true, in = ParameterIn.PATH) @PathVariable("gameSlug") String gameSlug,
        @Parameter(name = "categoryId", description = "the category of the leaderboard", required = true, in = ParameterIn.PATH) @PathVariable("categoryId") String categoryId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"gameName\" : \"gameName\", \"categoryLabel\" : \"categoryLabel\", \"run\" : { \"date\" : \"2000-01-23T04:56:07.000+00:00\", \"speedrunner\" : \"speedrunner\", \"runtime\" : { \"milliseconds\" : 5, \"hours\" : 0, \"seconds\" : 1, \"minutes\" : 6 }, \"videoLink\" : \"videoLink\", \"uuid\" : \"uuid\" } }, { \"gameName\" : \"gameName\", \"categoryLabel\" : \"categoryLabel\", \"run\" : { \"date\" : \"2000-01-23T04:56:07.000+00:00\", \"speedrunner\" : \"speedrunner\", \"runtime\" : { \"milliseconds\" : 5, \"hours\" : 0, \"seconds\" : 1, \"minutes\" : 6 }, \"videoLink\" : \"videoLink\", \"uuid\" : \"uuid\" } } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/api/reviews/unreviewed/{uuid} : Deletes a unreviewed run.
     * Deletes a unreviewed run. Only users with admin rights are allowed to delete a run.
     *
     * @param uuid uuid of the game (required)
     * @return Returned if the run is successfully deleted. (status code 204)
     *         or Returned if the caller is not authenticated. (status code 401)
     *         or Returned if the uuid is not found. (status code 404)
     */
    @Operation(
        operationId = "restApiReviewsUnreviewedUuidDelete",
        summary = "Deletes a unreviewed run.",
        description = "Deletes a unreviewed run. Only users with admin rights are allowed to delete a run.",
        tags = { "reviewing" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the run is successfully deleted."),
            @ApiResponse(responseCode = "401", description = "Returned if the caller is not authenticated."),
            @ApiResponse(responseCode = "404", description = "Returned if the uuid is not found.")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/api/reviews/unreviewed/{uuid}"
    )
    
    default ResponseEntity<Void> restApiReviewsUnreviewedUuidDelete(
        @Parameter(name = "uuid", description = "uuid of the game", required = true, in = ParameterIn.PATH) @PathVariable("uuid") String uuid
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PATCH /rest/api/reviews/unreviewed/{uuid} : Verifies a unreviewed run.
     * Verifies a unreviewed run. Only users with admin rights are allowed to verify a run.
     *
     * @param uuid uuid of the game (required)
     * @return Returned if the run is successfully verified. (status code 200)
     *         or Returned if the caller is not authenticated. (status code 401)
     *         or Returned if the uuid is not found. (status code 404)
     */
    @Operation(
        operationId = "restApiReviewsUnreviewedUuidPatch",
        summary = "Verifies a unreviewed run.",
        description = "Verifies a unreviewed run. Only users with admin rights are allowed to verify a run.",
        tags = { "reviewing" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the run is successfully verified."),
            @ApiResponse(responseCode = "401", description = "Returned if the caller is not authenticated."),
            @ApiResponse(responseCode = "404", description = "Returned if the uuid is not found.")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/rest/api/reviews/unreviewed/{uuid}"
    )
    
    default ResponseEntity<Void> restApiReviewsUnreviewedUuidPatch(
        @Parameter(name = "uuid", description = "uuid of the game", required = true, in = ParameterIn.PATH) @PathVariable("uuid") String uuid
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
