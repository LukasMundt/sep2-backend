/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.14.0-SNAPSHOT).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package de.haw.se2.praktikum.speedrun.se2_speedrun.openapitools.api;

import de.haw.se2.praktikum.speedrun.se2_speedrun.openapitools.model.Category;
import de.haw.se2.praktikum.speedrun.se2_speedrun.openapitools.model.GameDto;
import de.haw.se2.praktikum.speedrun.se2_speedrun.openapitools.model.RunDto;
import de.haw.se2.praktikum.speedrun.se2_speedrun.openapitools.model.RunReview;
import de.haw.se2.praktikum.speedrun.se2_speedrun.openapitools.model.TokenResponse;
import de.haw.se2.praktikum.speedrun.se2_speedrun.openapitools.model.Credentials;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import jakarta.annotation.Generated;
import jakarta.validation.Valid;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;

import java.util.List;
import java.util.Optional;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-05-11T18:39:45.042073870Z[Etc/UTC]", comments = "Generator version: 7.14.0-SNAPSHOT")
@Validated
public interface RestApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /rest/api/games/all : Get all available games.
     * Get all available games.
     *
     * @return Returns all available games. (status code 200)
     */
    @Operation(
        operationId = "restApiGamesAllGet",
        summary = "Get all available games.",
        description = "Get all available games.",
        tags = { "games" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns all available games.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = GameDto.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/games/all",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<GameDto>> restApiGamesAllGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"imageUrl\" : \"imageUrl\", \"name\" : \"minecraft\", \"slug\" : \"slug\" }, { \"imageUrl\" : \"imageUrl\", \"name\" : \"minecraft\", \"slug\" : \"slug\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/games/{gameSlug}/categories : Get available categories by game.
     * Get available categories by game.
     *
     * @param gameSlug  (required)
     * @return Returns all available categories for the given game. (status code 200)
     *         or Returned if the game were not found. (status code 404)
     */
    @Operation(
        operationId = "restApiGamesGameSlugCategoriesGet",
        summary = "Get available categories by game.",
        description = "Get available categories by game.",
        tags = { "games" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns all available categories for the given game.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Category.class)))
            }),
            @ApiResponse(responseCode = "404", description = "Returned if the game were not found.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/games/{gameSlug}/categories",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Category>> restApiGamesGameSlugCategoriesGet(
        @Parameter(name = "gameSlug", description = "", required = true, in = ParameterIn.PATH) @PathVariable("gameSlug") String gameSlug
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"id\" : \"ANY_PERCENT\", \"label\" : \"Any %\" }, { \"id\" : \"ANY_PERCENT\", \"label\" : \"Any %\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/games/{gameSlug}/{categoryId}/leaderboard : Get leaderboard by game and category.
     * Get leaderboard by game and category.
     *
     * @param gameSlug the game of the leaderboard (required)
     * @param categoryId the category of the leaderboard (required)
     * @return Returns a list of runs that are representing the leaderboard. (status code 200)
     *         or Returned if the game or category were not found. (status code 404)
     */
    @Operation(
        operationId = "restApiGamesGameSlugCategoryIdLeaderboardGet",
        summary = "Get leaderboard by game and category.",
        description = "Get leaderboard by game and category.",
        tags = { "games" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns a list of runs that are representing the leaderboard.", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = RunDto.class)))
            }),
            @ApiResponse(responseCode = "404", description = "Returned if the game or category were not found.")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/games/{gameSlug}/{categoryId}/leaderboard",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<RunDto>> restApiGamesGameSlugCategoryIdLeaderboardGet(
        @Parameter(name = "gameSlug", description = "the game of the leaderboard", required = true, in = ParameterIn.PATH) @PathVariable("gameSlug") String gameSlug,
        @Parameter(name = "categoryId", description = "the category of the leaderboard", required = true, in = ParameterIn.PATH) @PathVariable("categoryId") String categoryId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"date\" : \"2000-01-23T04:56:07.000+00:00\", \"speedrunner\" : \"speedrunner\", \"runtime\" : { \"milliseconds\" : 5, \"hours\" : 0, \"seconds\" : 1, \"minutes\" : 6 } }, { \"date\" : \"2000-01-23T04:56:07.000+00:00\", \"speedrunner\" : \"speedrunner\", \"runtime\" : { \"milliseconds\" : 5, \"hours\" : 0, \"seconds\" : 1, \"minutes\" : 6 } } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/api/reviews/unreviewed/all : Get a list of all unreviewed runs.
     * Get a list of all unreviewed runs. Only users with admin rights are allowed to get all unreviewed runs.
     *
     * @return Returns a list of all unreviewed runs (status code 200)
     *         or Returned if the caller is not authenticated. (status code 401)
     */
    @Operation(
        operationId = "restApiReviewsUnreviewedAllGet",
        summary = "Get a list of all unreviewed runs.",
        description = "Get a list of all unreviewed runs. Only users with admin rights are allowed to get all unreviewed runs.",
        tags = { "reviewing" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns a list of all unreviewed runs", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = RunReview.class)))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the caller is not authenticated.")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/api/reviews/unreviewed/all",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<RunReview>> restApiReviewsUnreviewedAllGet(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"gameName\" : \"gameName\", \"categoryLabel\" : \"categoryLabel\", \"run\" : { \"date\" : \"2000-01-23T04:56:07.000+00:00\", \"speedrunner\" : \"speedrunner\", \"runtime\" : { \"milliseconds\" : 5, \"hours\" : 0, \"seconds\" : 1, \"minutes\" : 6 } }, \"uuid\" : \"uuid\" }, { \"gameName\" : \"gameName\", \"categoryLabel\" : \"categoryLabel\", \"run\" : { \"date\" : \"2000-01-23T04:56:07.000+00:00\", \"speedrunner\" : \"speedrunner\", \"runtime\" : { \"milliseconds\" : 5, \"hours\" : 0, \"seconds\" : 1, \"minutes\" : 6 } }, \"uuid\" : \"uuid\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/api/reviews/verify : Verifies a unreviewed run.
     * Verifies a unreviewed run. Only users with admin rights are allowed to verify a run.
     *
     * @param body  (required)
     * @return Returned if the run is successfully verified. (status code 200)
     *         or Returned if the caller is not authenticated. (status code 401)
     *         or Returned if the uuid is not found. (status code 404)
     */
    @Operation(
        operationId = "restApiReviewsVerifyPost",
        summary = "Verifies a unreviewed run.",
        description = "Verifies a unreviewed run. Only users with admin rights are allowed to verify a run.",
        tags = { "reviewing" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the run is successfully verified."),
            @ApiResponse(responseCode = "401", description = "Returned if the caller is not authenticated."),
            @ApiResponse(responseCode = "404", description = "Returned if the uuid is not found.")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/api/reviews/verify",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> restApiReviewsVerifyPost(
        @Parameter(name = "body", description = "", required = true) @Valid @RequestBody String body
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /rest/auth : user logout
     * Logs the current user out, destroying the existing token, if any.
     *
     * @return Returned if the user was successfully logged out. (status code 204)
     *         or Returned if the caller is not authenticated. (status code 401)
     */
    @Operation(
        operationId = "restAuthDelete",
        summary = "user logout",
        description = "Logs the current user out, destroying the existing token, if any.",
        tags = { "authentication" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Returned if the user was successfully logged out."),
            @ApiResponse(responseCode = "401", description = "Returned if the caller is not authenticated.")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/rest/auth"
    )
    
    default ResponseEntity<Void> restAuthDelete(
        
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /rest/auth : user login info
     * Returns information about the currently authenticated user&#39;s token.
     *
     * @return Returned if the caller is authenticated. (status code 200)
     *         or Returned if the caller is not authenticated. (status code 401)
     */
    @Operation(
        operationId = "restAuthGet",
        summary = "user login info",
        description = "Returns information about the currently authenticated user's token.",
        tags = { "authentication" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returned if the caller is authenticated."),
            @ApiResponse(responseCode = "401", description = "Returned if the caller is not authenticated.")
        },
        security = {
            @SecurityRequirement(name = "bearerAuth")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/rest/auth"
    )
    
    default ResponseEntity<Void> restAuthGet(
        
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /rest/auth : user login
     * Creates a new token for a user.
     *
     * @param credentials  (required)
     * @return Returns information about the caller&#39;s token if the caller is authenticated. (status code 200)
     *         or Returned if the login fails due to invalid credentials. (status code 401)
     */
    @Operation(
        operationId = "restAuthPost",
        summary = "user login",
        description = "Creates a new token for a user.",
        tags = { "authentication" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Returns information about the caller's token if the caller is authenticated.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = TokenResponse.class))
            }),
            @ApiResponse(responseCode = "401", description = "Returned if the login fails due to invalid credentials.")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/rest/auth",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<TokenResponse> restAuthPost(
        @Parameter(name = "Credentials", description = "", required = true) @Valid @RequestBody Credentials credentials
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"access_token\" : \"access_token\", \"token_type\" : \"Bearer\", \"expires_in\" : 3600 }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
